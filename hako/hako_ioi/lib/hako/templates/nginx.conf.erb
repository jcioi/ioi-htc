upstream backend_server {
  server <%= listen_spec %>;
  keepalive 4;
}

geo $ioi_internal {
  proxy 127.0.0.1/32;
  proxy 10.18.192.0/18;
  proxy_recursive;

  default 0;
  # apne1 VPC
  10.18.192.0/18 1;
}

geo $ioi_internal_single {
  default 0;
  # apne1 VPC
  10.18.192.0/18 1;
}

<%- if location_uses_omniauth? -%>
upstream elb_nginx_omniauth_adapter {
  server nginx-omniauth-adapter.nlb.ioi18.net:80 fail_timeout=0;
  keepalive 4;
}
<%- end -%>

server {
  listen 80;

  set $request_proto "$http_x_forwarded_proto";
  if ($request_proto = "") {
    set $request_proto "http";
  }
  set $internal_xff_cond "$ioi_internal_single,$http_x_internal_forwarded_proto";
  if ($internal_xff_cond ~ "^1,." ) {
    set $request_proto "$http_x_internal_forwarded_proto";
  }

  <%- if location_uses_omniauth? -%>
set $ngx_omniauth_except_internal "0";
set $ngx_omniauth_allow "0";

location = /_auth/challenge {
  internal;

  error_page 407 = /_auth/challenge_real;
  error_page 417 = /_auth/challenge_ip;

  if ( $ngx_omniauth_except_internal = "1" ) {
    return 417;
  }

  return 407;
}

location = /_auth/challenge_ip {
  internal;

  if ( $ioi_internal = "1" ) {
    return 200;
  }

  if ( $ngx_omniauth_allow = "1" ) {
    return 200;
  }

  rewrite ^.+$ /_auth/challenge_real last;
}

location /_auth/challenge_real {
  internal;

  proxy_pass_request_body off;
  proxy_http_version 1.1;
  proxy_set_header Connection "";
  proxy_set_header Content-Length "";
  proxy_set_header Host $http_host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $request_proto;
  proxy_set_header X-Internal-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Internal-Forwarded-Proto $request_proto;
  proxy_set_header x-ngx-omniauth-original-uri $request_proto://$http_host$request_uri;

  proxy_pass http://elb_nginx_omniauth_adapter/test;
}

# STEP 2, Internal endpoint: Initiate authentication. Will redirect to adapter for omniauth sequence. (adapter: GET /initiate)
location = /_auth/initiate {
  internal;
  proxy_pass_request_body off;
  proxy_http_version 1.1;
  proxy_set_header Connection "";
  proxy_set_header Content-Length "";
  proxy_set_header Host $http_host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $request_proto;
  proxy_set_header X-Internal-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Internal-Forwarded-Proto $request_proto;
  proxy_set_header x-ngx-omniauth-initiate-back-to $request_proto://$http_host$request_uri;
  proxy_set_header x-ngx-omniauth-initiate-callback $request_proto://$http_host/_auth/callback;
  proxy_pass http://elb_nginx_omniauth_adapter/initiate;
}

# STEP 3, adapter will back here when authentication succeeded. proxy_pass to adapter to set session cookie.
location = /_auth/callback {
  auth_request off;

  proxy_http_version 1.1;
  proxy_set_header Connection "";
  proxy_set_header Host "$http_host";
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $request_proto;
  proxy_set_header X-Internal-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Internal-Forwarded-Proto $request_proto;
  proxy_pass http://elb_nginx_omniauth_adapter/callback;
}
  <%- end -%>

  <%- if client_max_body_size -%>
  client_max_body_size <%= client_max_body_size %>;
  <%- end -%>

  <%- locations.each do |path, location| -%>
  location <%= path %> {
<%= render_location(listen_spec, location) %>
  }
  <%- end -%>
}
