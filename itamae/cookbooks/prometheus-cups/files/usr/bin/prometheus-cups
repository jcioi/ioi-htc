#!/usr/bin/env ruby

require 'optparse'

require 'prometheus/client'
require 'prometheus/client/formats/text'
require 'cupsffi'

class PrometheusCUPS
  def initialize
    registry = Prometheus::Client.registry

    @metric_up = registry.gauge(:cups_up, 'Whether CUPS server is running')
    @metric_printer_up = registry.gauge(:cups_printer_up, 'Whether printer is running')
    @metric_printer_accepting = registry.gauge(:cups_printer_accepting, 'Whether printer is accepting jobs')
    @metric_printer_state_reason = registry.gauge(:cups_printer_state_reason, 'Printer state reason')
    @metric_printer_active_jobs = registry.gauge(:cups_printer_active_jobs, 'Number of currently active jobs')
  end

  def collect
    @metric_up.set({}, 0)
    printers = CupsPrinter.get_all_printer_attrs
    @metric_up.set({}, 1)

    printers.each do |name, attrs|
      case attrs['printer-state']
      when '3', '4' # idle, processing
        @metric_printer_up.set({name: name}, 1)
      when '5' # stopped
        @metric_printer_up.set({name: name}, 0)
      end

      if v = attrs['printer-state-reasons']
        v.split(?,).each do |reason|
          @metric_printer_state_reason.set({name: name, reason: reason}, 1)
        end
      end

      if v = attrs['printer-is-accepting-jobs']
        @metric_printer_accepting.set({name: name}, v == 'true' ? 1 : 0)
      end

      printer = CupsPrinter.new(name)
      jobs = printer.get_all_jobs.each.group_by {|job| job[:state] }

      CupsFFI::IppJState.symbols.each do |state|
        @metric_printer_active_jobs.set({name: name, state: state}, jobs[state]&.size || 0)
      end
    end
  rescue => e
    $stderr.puts e
  end
end

PrometheusCUPS.new.collect

opts = ARGV.getopts("o:")
text = Prometheus::Client::Formats::Text.marshal(Prometheus::Client.registry)
if dst = opts['o']
  tmp = "#{dst}.#$$"
  File.write(tmp, text)
  File.rename(tmp, dst)
else
  puts text
end
