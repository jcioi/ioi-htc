#!/usr/bin/env ruby
require 'json'
require 'yaml'
require 'etc'
require 'aws-sdk-codedeploy'
require 'aws-sdk-core' # sts

MARK_FILE = '/var/lib/ioi-ensure-onpremise-codedeploy-credentials/session_name'

json = JSON.parse(File.read('/etc/ioi-ensure-onpremise-codedeploy-credentials.json'))
user = Aws::Credentials.new(json.fetch('iam_user').fetch('access_key_id'), json.fetch('iam_user').fetch('secret_key'))

session_name = Dir['/sys/class/net/*']
  .grep(%r{net/en})
  .sort
  .first
  .yield_self { |ifpath| File.read(File.join(ifpath, 'address')) }
  .chomp
  .gsub(/:/, '')

if blacklist = json['blacklist']
  if Regexp.new(blacklist) === session_name
    puts "Session #{session_name} is blacklisted."
    exit 0
  end
end

sts = Aws::STS::Client.new(region: json.fetch('region'), credentials: user)
session = sts.assume_role(
  duration_seconds: 3600 * 6,
  role_arn: json.fetch('role_arn'),
  role_session_name: session_name,
)

File.open('/etc/codedeploy-agent/conf/credentials', 'w', 0640) do |io|
  io.puts '[default]'
  io.puts "aws_access_key_id = #{session.credentials.access_key_id}"
  io.puts "aws_secret_access_key = #{session.credentials.secret_access_key}"
  io.puts "aws_session_token = #{session.credentials.session_token}"
  io.puts "# until #{session.credentials.expiration}"
end

File.open('/etc/codedeploy-agent/conf/codedeploy.onpremises.yml', 'w', 0640) do |io|
  config = {
    region: json.fetch('region'),
    iam_session_arn: session.assumed_role_user.arn,
    aws_credentials_file: '/etc/codedeploy-agent/conf/credentials',
  }
  io.puts config.to_yaml
end

File.chown Process.euid, Etc.getgrnam('deploy').gid, '/etc/codedeploy-agent/conf/credentials'
File.chown Process.euid, Etc.getgrnam('deploy').gid, '/etc/codedeploy-agent/conf/codedeploy.onpremises.yml'
puts "#{session.assumed_role_user.arn} (#{session.credentials.access_key_id}) until #{session.credentials.expiration}"

exit 0 if File.exist?(MARK_FILE) && File.read(MARK_FILE).chomp == session_name

puts "Registering onpremise instance..."
codedeploy = Aws::CodeDeploy::Client.new(region: json.fetch('region'), credentials: user)
begin
  p codedeploy.register_on_premises_instance(
    instance_name: session_name,
    iam_session_arn: session.assumed_role_user.arn,
  )
  File.write MARK_FILE, "#{session_name}\n"
rescue Aws::CodeDeploy::Errors::IamSessionArnAlreadyRegisteredException, Aws::CodeDeploy::Errors::InstanceNameAlreadyRegisteredException
  exit 0
end

p codedeploy.add_tags_to_on_premises_instances(
  instance_names: [session_name],
  tags: json.fetch('tags', {}).map { |k,v| {key: k, value: v} },
)
